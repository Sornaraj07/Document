-------------
Install Git
-------------
[ec2-user@ip-172-31-39-183 ~]$ sudo su -
[root@ip-172-31-39-183 ~]# yum install git


----------------
Insatll Java
----------------

[root@ip-172-31-39-183 ~]# yum install java1-1.8*


Set Java Environment Variable
-------------------------------
[root@ip-172-31-39-183 ~]# cd /usr/lib/jvm/java-1.8.0

[root@ip-172-31-39-183 ~]# ll -a
[root@ip-172-31-39-183 ~]# vi .bash_profile

add command in .bash_profile:

JAVA_HOME=/usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64
PATH=$JAVA_HOME/bin:$PATH



--------------
Insatll Maven
--------------
Download the package and install:
---------------------------------
[root@ip-172-31-39-183 ~]# cd /opt
[root@ip-172-31-39-183 opt]# wget https://dlcdn.apache.org/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.tar.gz

[root@ip-172-31-39-183 opt]# tar -xvzf apache-maven-3.9.9-bin.tar.gz
[root@ip-172-31-39-183 opt]# rm -f apache-maven-3.9.9-bin.tar.gz

Set Maven Environment Variable
-------------------------------
export M2_HOME=/opt/apache-maven-3.9.9
export M2=$M2_HOME/bin
export PATH=$M2:$PATH

Add the porject source code or download from git including pom.xml file
[root@ip-172-31-39-183 ~]# git clone https://github.com/Sornaraj07/maven.git
 
Execute the command
--------------------
[root@ip-172-31-39-183 maven]# mvn -version
[root@ip-172-31-39-183 maven]# mvn install
[root@ip-172-31-39-183 maven]# mvn clean install

Once run the mave command target folder generated alson with .jar file
[root@ip-172-31-39-183 ~]# cd /opt/apache-maven-3.9.9/server/target


 
mvn clean
mvn compiler:compile
mvn compiler:testCompile
mvn package
mvn install
mvn deploy
mvn validate
mvn dependency:tree
mvn dependency:analyze
mvn archetype:generate
mvn site:site
mvn test
mvn compile
mvn verify
mvn -T 4 clean install

Clean: Cleans the project and removes all files generated by the previous build (target folder).
Validate: This step validates if the project structure is correct. For example â€“ It checks if all the dependencies have been downloaded and are available in the local repository.
Compile: It compiles the source code, converts the .java files to .class, and stores the classes in the target/classes folder.
Test: It runs unit tests for the project.
Package: This step packages the compiled code in a distributable format like JAR or WAR.
Integration test: It runs the integration tests for the project.
Verify: This step runs checks to verify that the project is valid and meets the quality standards.
Install: This step installs the packaged code to the local Maven repository.
Deploy: It copies the packaged code to the remote repository for sharing it with other developers.


-----------------------
Apache tomcat config :
-----------------------
Download the package and install:
---------------------------------
[root@ip-172-31-39-183 ~]# cd /opt
[root@ip-172-31-39-183 opt]# wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.95/bin/apache-tomcat-9.0.95.tar.gz
[root@ip-172-31-39-183 opt]# tar -xvzf apache-tomcat-9.0.95.tar.gz
[root@ip-172-31-39-183 opt]# mv apache-tomcat-9.0.95 tomcat   --- Rename the folder name
[root@ip-172-31-39-183 opt]# rm -f apache-tomcat-9.0.95.tar.gz     ---- Remove .tar.gz folder

Service start:
---------------
[root@ip-172-31-39-183 ~]# cd /opt/tomcat/bin
Create the softlink for execute script for startup.sh & shutdown.sh

ln -s /opt/tomcat/bin/startup.sh /usr/local/bin/tomcatup
ln -s /opt/tomcat/bin/shutdown.sh /usr/local/bin/tomcatdown
tomcatup
tomcatdown

Add user and role access:
--------------------------
[root@ip-172-31-39-183 ~]# cd /opt/tomcat/conf
open -- > tomcat-users.xml --> add users like below
<role rolename="manager-gui"/>
<role rolename="manager-script"/>
<role rolename="admin-gui"/>
<role rolename="admin-script"/>
<user username="admin" password="admin" roles="manager-gui,admin-gui,manager-script,admin-script"/>


Allow all IP to access tomcat manage page:
------------------------------------------
[root@ip-172-31-39-183 ~]# cd /opt/tomcat/webapps/manager/META-INF
open --> context.xml  --> edit allow all (^.*$) or specific IP address
<Valve className="org.apache.catalina.valves.RemoteAddrValve"
         allow="^.*$" />
		 
<Valve className="org.apache.catalina.valves.RemoteAddrValve"
         allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1 | 13.53.205.36" />

		 
		 
Tomcat specific port assigning
-------------------------------
[root@ip-172-31-39-183 ~]# cd /opt/tomcat/conf
open -- > server.xml

<Connector port="8090" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443"
               maxParameterCount="1000"
               />

Run Application
-----------------

[root@ip-172-31-39-183 ~]# cd /opt/tomcat/webapps	 -- copy the .war .jar files in this folder
go to browser open the link  http://13.53.205.36:8090/sample/     --- sample is .war file

		   










